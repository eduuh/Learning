type Query {
 me: User!
 post: Post!
 users(query: String): [User]!
 posts(query: String): [Post]!
 comments(query: String): [Comment!]
}

type Mutation {
 createUser(data: createUserInput!): User!
 deleteUser(id: ID!): User!
 updateUser(id: ID!, data: updateUserInput): User!
 createPost(data: createUserPost!): Post!
 updatePost(id: ID!, data: updatePostInput): Post!
 deletePost(id: ID!): Post!
 createComment(data: createCommentInput!): Comment!
 deleteComment(id: ID!): Comment!
 updateComment(id: ID!, data: updateCommentInput!): Post!
}

type Subscription {
  count: Int!
  comment(postId: ID!): CommentSubscriptionpayload!
  post: PostSubscriptionpayload! 
  user: UserSubscriptionpayload!
}

input updateCommentInput {
 text: String!
}

input updatePostInput {
  title: String
  body: String
  published: Boolean
}
input createCommentInput {
  text: String!
  author: ID!
  post: ID!
}

input createUserInput {
 name: String!
 email: String!
 age: Int
}
input updateUserInput {
  name: String
  email: String
  age: Int
}

input createUserPost {
 title: String!
 body: String!
 published: Boolean!
 author: ID!
}


type Comment {
 id: ID!,
 text: String!
 author: User!
 post: Post
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  post: [Post!]
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment]!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionpayload {
  mutation: MutationType!
  data: Post!
}

type UserSubscriptionpayload {
  mutation: MutationType!
  data: User!
}


type CommentSubscriptionpayload {
  mutation: MutationType!
  data: Comment!
}


